The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
-------------------

First import:
``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Now test it:
    Regular test
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    >>> matrix
    [[1, 2, 3], [4, 5, 6]]

    Checks if return type is list
    >>> type(matrix_divided(matrix, 7))
    <class 'list'>

    Test with only one argument
    >>> matrix_divided(matrix)
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    Test with a string
    >>> matrix_divided(matrix, 'f')
    Traceback (most recent call last):
    TypeError: div must be a number

    Test with a zero
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    Test for non-2D matrix
    >>> matrix_divided([1, 2, 3], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided('strss', 7)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    Test with floats
    >>> matrix_divided(matrix, 7.34)
    [[0.14, 0.27, 0.41], [0.54, 0.68, 0.82]]

    Test with no input
    >>> matrix_divided()
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

    Test for square matrix
    >>> matrix = [[1, 2, 3, 6], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size
